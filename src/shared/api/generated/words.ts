/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from '@tanstack/react-query';

import type { CreateWordDto, UpdateWordDto } from './model';

import { apiInstance } from '../instance';

export const wordsControllerCreate = (createWordDto: CreateWordDto, signal?: AbortSignal) => {
	return apiInstance<void>({
		url: `/words`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: createWordDto,
		signal,
	});
};

export const getWordsControllerCreateMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof wordsControllerCreate>>,
		TError,
		{ data: CreateWordDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof wordsControllerCreate>>,
	TError,
	{ data: CreateWordDto },
	TContext
> => {
	const mutationKey = ['wordsControllerCreate'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof wordsControllerCreate>>,
		{ data: CreateWordDto }
	> = (props) => {
		const { data } = props ?? {};

		return wordsControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type WordsControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof wordsControllerCreate>>
>;
export type WordsControllerCreateMutationBody = CreateWordDto;
export type WordsControllerCreateMutationError = unknown;

export const useWordsControllerCreate = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof wordsControllerCreate>>,
			TError,
			{ data: CreateWordDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof wordsControllerCreate>>,
	TError,
	{ data: CreateWordDto },
	TContext
> => {
	const mutationOptions = getWordsControllerCreateMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const wordsControllerFindOne = (id: string, signal?: AbortSignal) => {
	return apiInstance<void>({ url: `/words/${id}`, method: 'GET', signal });
};

export const getWordsControllerFindOneQueryKey = (id: string) => {
	return [`/words/${id}`] as const;
};

export const getWordsControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof wordsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof wordsControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getWordsControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof wordsControllerFindOne>>> = ({ signal }) =>
		wordsControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof wordsControllerFindOne>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WordsControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof wordsControllerFindOne>>
>;
export type WordsControllerFindOneQueryError = unknown;

export function useWordsControllerFindOne<
	TData = Awaited<ReturnType<typeof wordsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof wordsControllerFindOne>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof wordsControllerFindOne>>,
					TError,
					Awaited<ReturnType<typeof wordsControllerFindOne>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWordsControllerFindOne<
	TData = Awaited<ReturnType<typeof wordsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof wordsControllerFindOne>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof wordsControllerFindOne>>,
					TError,
					Awaited<ReturnType<typeof wordsControllerFindOne>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWordsControllerFindOne<
	TData = Awaited<ReturnType<typeof wordsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof wordsControllerFindOne>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useWordsControllerFindOne<
	TData = Awaited<ReturnType<typeof wordsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof wordsControllerFindOne>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getWordsControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getWordsControllerFindOneSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof wordsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof wordsControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getWordsControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof wordsControllerFindOne>>> = ({ signal }) =>
		wordsControllerFindOne(id, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof wordsControllerFindOne>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WordsControllerFindOneSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof wordsControllerFindOne>>
>;
export type WordsControllerFindOneSuspenseQueryError = unknown;

export function useWordsControllerFindOneSuspense<
	TData = Awaited<ReturnType<typeof wordsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof wordsControllerFindOne>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWordsControllerFindOneSuspense<
	TData = Awaited<ReturnType<typeof wordsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof wordsControllerFindOne>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useWordsControllerFindOneSuspense<
	TData = Awaited<ReturnType<typeof wordsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof wordsControllerFindOne>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useWordsControllerFindOneSuspense<
	TData = Awaited<ReturnType<typeof wordsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof wordsControllerFindOne>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getWordsControllerFindOneSuspenseQueryOptions(id, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const wordsControllerUpdate = (id: string, updateWordDto: UpdateWordDto) => {
	return apiInstance<void>({
		url: `/words/${id}`,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json' },
		data: updateWordDto,
	});
};

export const getWordsControllerUpdateMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof wordsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateWordDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof wordsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateWordDto },
	TContext
> => {
	const mutationKey = ['wordsControllerUpdate'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof wordsControllerUpdate>>,
		{ id: string; data: UpdateWordDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return wordsControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type WordsControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof wordsControllerUpdate>>
>;
export type WordsControllerUpdateMutationBody = UpdateWordDto;
export type WordsControllerUpdateMutationError = unknown;

export const useWordsControllerUpdate = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof wordsControllerUpdate>>,
			TError,
			{ id: string; data: UpdateWordDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof wordsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateWordDto },
	TContext
> => {
	const mutationOptions = getWordsControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const wordsControllerRemove = (id: string) => {
	return apiInstance<void>({ url: `/words/${id}`, method: 'DELETE' });
};

export const getWordsControllerRemoveMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof wordsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof wordsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ['wordsControllerRemove'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof wordsControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return wordsControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type WordsControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof wordsControllerRemove>>
>;

export type WordsControllerRemoveMutationError = unknown;

export const useWordsControllerRemove = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof wordsControllerRemove>>,
			TError,
			{ id: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof wordsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getWordsControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
