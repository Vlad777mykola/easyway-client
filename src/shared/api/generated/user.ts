/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from '@tanstack/react-query';

import type { CreateUserDto, UpdateUserDto } from './model';

import { apiInstance } from '../instance';

export const userControllerSignup = (createUserDto: CreateUserDto, signal?: AbortSignal) => {
	return apiInstance<void>({
		url: `/auth/signup`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: createUserDto,
		signal,
	});
};

export const getUserControllerSignupMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerSignup>>,
		TError,
		{ data: CreateUserDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof userControllerSignup>>,
	TError,
	{ data: CreateUserDto },
	TContext
> => {
	const mutationKey = ['userControllerSignup'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userControllerSignup>>,
		{ data: CreateUserDto }
	> = (props) => {
		const { data } = props ?? {};

		return userControllerSignup(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserControllerSignupMutationResult = NonNullable<
	Awaited<ReturnType<typeof userControllerSignup>>
>;
export type UserControllerSignupMutationBody = CreateUserDto;
export type UserControllerSignupMutationError = unknown;

export const useUserControllerSignup = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof userControllerSignup>>,
			TError,
			{ data: CreateUserDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof userControllerSignup>>,
	TError,
	{ data: CreateUserDto },
	TContext
> => {
	const mutationOptions = getUserControllerSignupMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const userControllerSignin = (createUserDto: CreateUserDto, signal?: AbortSignal) => {
	return apiInstance<void>({
		url: `/auth/signin`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: createUserDto,
		signal,
	});
};

export const getUserControllerSigninMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerSignin>>,
		TError,
		{ data: CreateUserDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof userControllerSignin>>,
	TError,
	{ data: CreateUserDto },
	TContext
> => {
	const mutationKey = ['userControllerSignin'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userControllerSignin>>,
		{ data: CreateUserDto }
	> = (props) => {
		const { data } = props ?? {};

		return userControllerSignin(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserControllerSigninMutationResult = NonNullable<
	Awaited<ReturnType<typeof userControllerSignin>>
>;
export type UserControllerSigninMutationBody = CreateUserDto;
export type UserControllerSigninMutationError = unknown;

export const useUserControllerSignin = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof userControllerSignin>>,
			TError,
			{ data: CreateUserDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof userControllerSignin>>,
	TError,
	{ data: CreateUserDto },
	TContext
> => {
	const mutationOptions = getUserControllerSigninMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const userControllerSignout = (signal?: AbortSignal) => {
	return apiInstance<void>({ url: `/auth/signout`, method: 'POST', signal });
};

export const getUserControllerSignoutMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerSignout>>,
		TError,
		void,
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof userControllerSignout>>,
	TError,
	void,
	TContext
> => {
	const mutationKey = ['userControllerSignout'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userControllerSignout>>,
		void
	> = () => {
		return userControllerSignout();
	};

	return { mutationFn, ...mutationOptions };
};

export type UserControllerSignoutMutationResult = NonNullable<
	Awaited<ReturnType<typeof userControllerSignout>>
>;

export type UserControllerSignoutMutationError = unknown;

export const useUserControllerSignout = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof userControllerSignout>>,
			TError,
			void,
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof userControllerSignout>>, TError, void, TContext> => {
	const mutationOptions = getUserControllerSignoutMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const userControllerMe = (signal?: AbortSignal) => {
	return apiInstance<void>({ url: `/auth/me`, method: 'GET', signal });
};

export const getUserControllerMeQueryKey = () => {
	return [`/auth/me`] as const;
};

export const getUserControllerMeQueryOptions = <
	TData = Awaited<ReturnType<typeof userControllerMe>>,
	TError = unknown,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userControllerMe>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserControllerMeQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userControllerMe>>> = ({ signal }) =>
		userControllerMe(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof userControllerMe>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerMeQueryResult = NonNullable<Awaited<ReturnType<typeof userControllerMe>>>;
export type UserControllerMeQueryError = unknown;

export function useUserControllerMe<
	TData = Awaited<ReturnType<typeof userControllerMe>>,
	TError = unknown,
>(
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof userControllerMe>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof userControllerMe>>,
					TError,
					Awaited<ReturnType<typeof userControllerMe>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUserControllerMe<
	TData = Awaited<ReturnType<typeof userControllerMe>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userControllerMe>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof userControllerMe>>,
					TError,
					Awaited<ReturnType<typeof userControllerMe>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUserControllerMe<
	TData = Awaited<ReturnType<typeof userControllerMe>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userControllerMe>>, TError, TData>>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useUserControllerMe<
	TData = Awaited<ReturnType<typeof userControllerMe>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userControllerMe>>, TError, TData>>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserControllerMeQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getUserControllerMeSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof userControllerMe>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerMe>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserControllerMeQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userControllerMe>>> = ({ signal }) =>
		userControllerMe(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof userControllerMe>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerMeSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof userControllerMe>>
>;
export type UserControllerMeSuspenseQueryError = unknown;

export function useUserControllerMeSuspense<
	TData = Awaited<ReturnType<typeof userControllerMe>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerMe>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUserControllerMeSuspense<
	TData = Awaited<ReturnType<typeof userControllerMe>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerMe>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUserControllerMeSuspense<
	TData = Awaited<ReturnType<typeof userControllerMe>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerMe>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useUserControllerMeSuspense<
	TData = Awaited<ReturnType<typeof userControllerMe>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerMe>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserControllerMeSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const userControllerFindAll = (signal?: AbortSignal) => {
	return apiInstance<void>({ url: `/auth`, method: 'GET', signal });
};

export const getUserControllerFindAllQueryKey = () => {
	return [`/auth`] as const;
};

export const getUserControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof userControllerFindAll>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof userControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userControllerFindAll>>> = ({ signal }) =>
		userControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof userControllerFindAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof userControllerFindAll>>
>;
export type UserControllerFindAllQueryError = unknown;

export function useUserControllerFindAll<
	TData = Awaited<ReturnType<typeof userControllerFindAll>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof userControllerFindAll>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof userControllerFindAll>>,
					TError,
					Awaited<ReturnType<typeof userControllerFindAll>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUserControllerFindAll<
	TData = Awaited<ReturnType<typeof userControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof userControllerFindAll>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof userControllerFindAll>>,
					TError,
					Awaited<ReturnType<typeof userControllerFindAll>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUserControllerFindAll<
	TData = Awaited<ReturnType<typeof userControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof userControllerFindAll>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useUserControllerFindAll<
	TData = Awaited<ReturnType<typeof userControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof userControllerFindAll>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getUserControllerFindAllSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof userControllerFindAll>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userControllerFindAll>>> = ({ signal }) =>
		userControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof userControllerFindAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerFindAllSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof userControllerFindAll>>
>;
export type UserControllerFindAllSuspenseQueryError = unknown;

export function useUserControllerFindAllSuspense<
	TData = Awaited<ReturnType<typeof userControllerFindAll>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerFindAll>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUserControllerFindAllSuspense<
	TData = Awaited<ReturnType<typeof userControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerFindAll>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUserControllerFindAllSuspense<
	TData = Awaited<ReturnType<typeof userControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerFindAll>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useUserControllerFindAllSuspense<
	TData = Awaited<ReturnType<typeof userControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerFindAll>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserControllerFindAllSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const userControllerFindOne = (id: string, signal?: AbortSignal) => {
	return apiInstance<void>({ url: `/auth/${id}`, method: 'GET', signal });
};

export const getUserControllerFindOneQueryKey = (id: string) => {
	return [`/auth/${id}`] as const;
};

export const getUserControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof userControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof userControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userControllerFindOne>>> = ({ signal }) =>
		userControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof userControllerFindOne>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof userControllerFindOne>>
>;
export type UserControllerFindOneQueryError = unknown;

export function useUserControllerFindOne<
	TData = Awaited<ReturnType<typeof userControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof userControllerFindOne>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof userControllerFindOne>>,
					TError,
					Awaited<ReturnType<typeof userControllerFindOne>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUserControllerFindOne<
	TData = Awaited<ReturnType<typeof userControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof userControllerFindOne>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof userControllerFindOne>>,
					TError,
					Awaited<ReturnType<typeof userControllerFindOne>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUserControllerFindOne<
	TData = Awaited<ReturnType<typeof userControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof userControllerFindOne>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useUserControllerFindOne<
	TData = Awaited<ReturnType<typeof userControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof userControllerFindOne>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getUserControllerFindOneSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof userControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUserControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof userControllerFindOne>>> = ({ signal }) =>
		userControllerFindOne(id, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof userControllerFindOne>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerFindOneSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof userControllerFindOne>>
>;
export type UserControllerFindOneSuspenseQueryError = unknown;

export function useUserControllerFindOneSuspense<
	TData = Awaited<ReturnType<typeof userControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerFindOne>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUserControllerFindOneSuspense<
	TData = Awaited<ReturnType<typeof userControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerFindOne>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUserControllerFindOneSuspense<
	TData = Awaited<ReturnType<typeof userControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerFindOne>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useUserControllerFindOneSuspense<
	TData = Awaited<ReturnType<typeof userControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof userControllerFindOne>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getUserControllerFindOneSuspenseQueryOptions(id, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const userControllerUpdate = (id: string, updateUserDto: UpdateUserDto) => {
	return apiInstance<void>({
		url: `/auth/${id}`,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json' },
		data: updateUserDto,
	});
};

export const getUserControllerUpdateMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerUpdate>>,
		TError,
		{ id: string; data: UpdateUserDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof userControllerUpdate>>,
	TError,
	{ id: string; data: UpdateUserDto },
	TContext
> => {
	const mutationKey = ['userControllerUpdate'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userControllerUpdate>>,
		{ id: string; data: UpdateUserDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return userControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof userControllerUpdate>>
>;
export type UserControllerUpdateMutationBody = UpdateUserDto;
export type UserControllerUpdateMutationError = unknown;

export const useUserControllerUpdate = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof userControllerUpdate>>,
			TError,
			{ id: string; data: UpdateUserDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof userControllerUpdate>>,
	TError,
	{ id: string; data: UpdateUserDto },
	TContext
> => {
	const mutationOptions = getUserControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const userControllerRemove = (id: string) => {
	return apiInstance<void>({ url: `/auth/${id}`, method: 'DELETE' });
};

export const getUserControllerRemoveMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof userControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ['userControllerRemove'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return userControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof userControllerRemove>>
>;

export type UserControllerRemoveMutationError = unknown;

export const useUserControllerRemove = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof userControllerRemove>>,
			TError,
			{ id: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof userControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getUserControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const userControllerSaveCollection = (collectionId: string, signal?: AbortSignal) => {
	return apiInstance<void>({ url: `/auth/save/${collectionId}`, method: 'POST', signal });
};

export const getUserControllerSaveCollectionMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof userControllerSaveCollection>>,
		TError,
		{ collectionId: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof userControllerSaveCollection>>,
	TError,
	{ collectionId: string },
	TContext
> => {
	const mutationKey = ['userControllerSaveCollection'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof userControllerSaveCollection>>,
		{ collectionId: string }
	> = (props) => {
		const { collectionId } = props ?? {};

		return userControllerSaveCollection(collectionId);
	};

	return { mutationFn, ...mutationOptions };
};

export type UserControllerSaveCollectionMutationResult = NonNullable<
	Awaited<ReturnType<typeof userControllerSaveCollection>>
>;

export type UserControllerSaveCollectionMutationError = unknown;

export const useUserControllerSaveCollection = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof userControllerSaveCollection>>,
			TError,
			{ collectionId: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof userControllerSaveCollection>>,
	TError,
	{ collectionId: string },
	TContext
> => {
	const mutationOptions = getUserControllerSaveCollectionMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
