/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from '@tanstack/react-query';

import type { CreateFiltersCollectionDto, UpdateFiltersCollectionDto } from './model';

import { apiInstance } from '../instance';

export const filtersCollectionsControllerCreate = (
	createFiltersCollectionDto: CreateFiltersCollectionDto,
	signal?: AbortSignal,
) => {
	return apiInstance<void>({
		url: `/filters-collections`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: createFiltersCollectionDto,
		signal,
	});
};

export const getFiltersCollectionsControllerCreateMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof filtersCollectionsControllerCreate>>,
		TError,
		{ data: CreateFiltersCollectionDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof filtersCollectionsControllerCreate>>,
	TError,
	{ data: CreateFiltersCollectionDto },
	TContext
> => {
	const mutationKey = ['filtersCollectionsControllerCreate'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof filtersCollectionsControllerCreate>>,
		{ data: CreateFiltersCollectionDto }
	> = (props) => {
		const { data } = props ?? {};

		return filtersCollectionsControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type FiltersCollectionsControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof filtersCollectionsControllerCreate>>
>;
export type FiltersCollectionsControllerCreateMutationBody = CreateFiltersCollectionDto;
export type FiltersCollectionsControllerCreateMutationError = unknown;

export const useFiltersCollectionsControllerCreate = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof filtersCollectionsControllerCreate>>,
			TError,
			{ data: CreateFiltersCollectionDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof filtersCollectionsControllerCreate>>,
	TError,
	{ data: CreateFiltersCollectionDto },
	TContext
> => {
	const mutationOptions = getFiltersCollectionsControllerCreateMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const filtersCollectionsControllerFindAll = (signal?: AbortSignal) => {
	return apiInstance<void>({ url: `/filters-collections`, method: 'GET', signal });
};

export const getFiltersCollectionsControllerFindAllQueryKey = () => {
	return [`/filters-collections`] as const;
};

export const getFiltersCollectionsControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFiltersCollectionsControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>> = ({
		signal,
	}) => filtersCollectionsControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FiltersCollectionsControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>
>;
export type FiltersCollectionsControllerFindAllQueryError = unknown;

export function useFiltersCollectionsControllerFindAll<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
					TError,
					Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFiltersCollectionsControllerFindAll<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
					TError,
					Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFiltersCollectionsControllerFindAll<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFiltersCollectionsControllerFindAll<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getFiltersCollectionsControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getFiltersCollectionsControllerFindAllSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<
			Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
			TError,
			TData
		>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFiltersCollectionsControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>> = ({
		signal,
	}) => filtersCollectionsControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FiltersCollectionsControllerFindAllSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>
>;
export type FiltersCollectionsControllerFindAllSuspenseQueryError = unknown;

export function useFiltersCollectionsControllerFindAllSuspense<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFiltersCollectionsControllerFindAllSuspense<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFiltersCollectionsControllerFindAllSuspense<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFiltersCollectionsControllerFindAllSuspense<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindAll>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getFiltersCollectionsControllerFindAllSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const filtersCollectionsControllerFindOne = (id: string, signal?: AbortSignal) => {
	return apiInstance<void>({ url: `/filters-collections/${id}`, method: 'GET', signal });
};

export const getFiltersCollectionsControllerFindOneQueryKey = (id: string) => {
	return [`/filters-collections/${id}`] as const;
};

export const getFiltersCollectionsControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFiltersCollectionsControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>> = ({
		signal,
	}) => filtersCollectionsControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FiltersCollectionsControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>
>;
export type FiltersCollectionsControllerFindOneQueryError = unknown;

export function useFiltersCollectionsControllerFindOne<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
					TError,
					Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFiltersCollectionsControllerFindOne<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
					TError,
					Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFiltersCollectionsControllerFindOne<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFiltersCollectionsControllerFindOne<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getFiltersCollectionsControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getFiltersCollectionsControllerFindOneSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFiltersCollectionsControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>> = ({
		signal,
	}) => filtersCollectionsControllerFindOne(id, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FiltersCollectionsControllerFindOneSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>
>;
export type FiltersCollectionsControllerFindOneSuspenseQueryError = unknown;

export function useFiltersCollectionsControllerFindOneSuspense<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFiltersCollectionsControllerFindOneSuspense<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFiltersCollectionsControllerFindOneSuspense<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFiltersCollectionsControllerFindOneSuspense<
	TData = Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof filtersCollectionsControllerFindOne>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getFiltersCollectionsControllerFindOneSuspenseQueryOptions(id, options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const filtersCollectionsControllerUpdate = (
	id: string,
	updateFiltersCollectionDto: UpdateFiltersCollectionDto,
) => {
	return apiInstance<void>({
		url: `/filters-collections/${id}`,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json' },
		data: updateFiltersCollectionDto,
	});
};

export const getFiltersCollectionsControllerUpdateMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof filtersCollectionsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateFiltersCollectionDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof filtersCollectionsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateFiltersCollectionDto },
	TContext
> => {
	const mutationKey = ['filtersCollectionsControllerUpdate'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof filtersCollectionsControllerUpdate>>,
		{ id: string; data: UpdateFiltersCollectionDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return filtersCollectionsControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type FiltersCollectionsControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof filtersCollectionsControllerUpdate>>
>;
export type FiltersCollectionsControllerUpdateMutationBody = UpdateFiltersCollectionDto;
export type FiltersCollectionsControllerUpdateMutationError = unknown;

export const useFiltersCollectionsControllerUpdate = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof filtersCollectionsControllerUpdate>>,
			TError,
			{ id: string; data: UpdateFiltersCollectionDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof filtersCollectionsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateFiltersCollectionDto },
	TContext
> => {
	const mutationOptions = getFiltersCollectionsControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const filtersCollectionsControllerRemove = (id: string) => {
	return apiInstance<void>({ url: `/filters-collections/${id}`, method: 'DELETE' });
};

export const getFiltersCollectionsControllerRemoveMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof filtersCollectionsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof filtersCollectionsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ['filtersCollectionsControllerRemove'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof filtersCollectionsControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return filtersCollectionsControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type FiltersCollectionsControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof filtersCollectionsControllerRemove>>
>;

export type FiltersCollectionsControllerRemoveMutationError = unknown;

export const useFiltersCollectionsControllerRemove = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof filtersCollectionsControllerRemove>>,
			TError,
			{ id: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof filtersCollectionsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getFiltersCollectionsControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
