/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from '@tanstack/react-query';

import type { CreateFilterDto, FiltersDto, UpdateFilterDto } from './model';

import { apiInstance } from '../instance';

/**
 * @summary Get all filters
 */
export const filtersControllerFind = (signal?: AbortSignal) => {
	return apiInstance<FiltersDto>({ url: `/filters`, method: 'GET', signal });
};

export const getFiltersControllerFindQueryKey = () => {
	return [`/filters`] as const;
};

export const getFiltersControllerFindQueryOptions = <
	TData = Awaited<ReturnType<typeof filtersControllerFind>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof filtersControllerFind>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFiltersControllerFindQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof filtersControllerFind>>> = ({ signal }) =>
		filtersControllerFind(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof filtersControllerFind>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FiltersControllerFindQueryResult = NonNullable<
	Awaited<ReturnType<typeof filtersControllerFind>>
>;
export type FiltersControllerFindQueryError = unknown;

export function useFiltersControllerFind<
	TData = Awaited<ReturnType<typeof filtersControllerFind>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof filtersControllerFind>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof filtersControllerFind>>,
					TError,
					Awaited<ReturnType<typeof filtersControllerFind>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFiltersControllerFind<
	TData = Awaited<ReturnType<typeof filtersControllerFind>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof filtersControllerFind>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof filtersControllerFind>>,
					TError,
					Awaited<ReturnType<typeof filtersControllerFind>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFiltersControllerFind<
	TData = Awaited<ReturnType<typeof filtersControllerFind>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof filtersControllerFind>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all filters
 */

export function useFiltersControllerFind<
	TData = Awaited<ReturnType<typeof filtersControllerFind>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof filtersControllerFind>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getFiltersControllerFindQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getFiltersControllerFindSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof filtersControllerFind>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<Awaited<ReturnType<typeof filtersControllerFind>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getFiltersControllerFindQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof filtersControllerFind>>> = ({ signal }) =>
		filtersControllerFind(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof filtersControllerFind>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FiltersControllerFindSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof filtersControllerFind>>
>;
export type FiltersControllerFindSuspenseQueryError = unknown;

export function useFiltersControllerFindSuspense<
	TData = Awaited<ReturnType<typeof filtersControllerFind>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof filtersControllerFind>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFiltersControllerFindSuspense<
	TData = Awaited<ReturnType<typeof filtersControllerFind>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof filtersControllerFind>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFiltersControllerFindSuspense<
	TData = Awaited<ReturnType<typeof filtersControllerFind>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof filtersControllerFind>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all filters
 */

export function useFiltersControllerFindSuspense<
	TData = Awaited<ReturnType<typeof filtersControllerFind>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof filtersControllerFind>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getFiltersControllerFindSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create new filters
 */
export const filtersControllerCreate = (createFilterDto: CreateFilterDto, signal?: AbortSignal) => {
	return apiInstance<FiltersDto>({
		url: `/filters`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: createFilterDto,
		signal,
	});
};

export const getFiltersControllerCreateMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof filtersControllerCreate>>,
		TError,
		{ data: CreateFilterDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof filtersControllerCreate>>,
	TError,
	{ data: CreateFilterDto },
	TContext
> => {
	const mutationKey = ['filtersControllerCreate'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof filtersControllerCreate>>,
		{ data: CreateFilterDto }
	> = (props) => {
		const { data } = props ?? {};

		return filtersControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type FiltersControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof filtersControllerCreate>>
>;
export type FiltersControllerCreateMutationBody = CreateFilterDto;
export type FiltersControllerCreateMutationError = unknown;

/**
 * @summary Create new filters
 */
export const useFiltersControllerCreate = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof filtersControllerCreate>>,
			TError,
			{ data: CreateFilterDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof filtersControllerCreate>>,
	TError,
	{ data: CreateFilterDto },
	TContext
> => {
	const mutationOptions = getFiltersControllerCreateMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Update existing filters
 */
export const filtersControllerUpdate = (updateFilterDto: UpdateFilterDto) => {
	return apiInstance<FiltersDto>({
		url: `/filters`,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json' },
		data: updateFilterDto,
	});
};

export const getFiltersControllerUpdateMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof filtersControllerUpdate>>,
		TError,
		{ data: UpdateFilterDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof filtersControllerUpdate>>,
	TError,
	{ data: UpdateFilterDto },
	TContext
> => {
	const mutationKey = ['filtersControllerUpdate'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof filtersControllerUpdate>>,
		{ data: UpdateFilterDto }
	> = (props) => {
		const { data } = props ?? {};

		return filtersControllerUpdate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type FiltersControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof filtersControllerUpdate>>
>;
export type FiltersControllerUpdateMutationBody = UpdateFilterDto;
export type FiltersControllerUpdateMutationError = unknown;

/**
 * @summary Update existing filters
 */
export const useFiltersControllerUpdate = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof filtersControllerUpdate>>,
			TError,
			{ data: UpdateFilterDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof filtersControllerUpdate>>,
	TError,
	{ data: UpdateFilterDto },
	TContext
> => {
	const mutationOptions = getFiltersControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a filter by ID
 */
export const filtersControllerRemove = (id: number) => {
	return apiInstance<void>({ url: `/filters/${id}`, method: 'DELETE' });
};

export const getFiltersControllerRemoveMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof filtersControllerRemove>>,
		TError,
		{ id: number },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof filtersControllerRemove>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ['filtersControllerRemove'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof filtersControllerRemove>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {};

		return filtersControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type FiltersControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof filtersControllerRemove>>
>;

export type FiltersControllerRemoveMutationError = unknown;

/**
 * @summary Delete a filter by ID
 */
export const useFiltersControllerRemove = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof filtersControllerRemove>>,
			TError,
			{ id: number },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof filtersControllerRemove>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getFiltersControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
