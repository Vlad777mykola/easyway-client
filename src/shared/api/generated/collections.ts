/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from '@tanstack/react-query';

import type { CreateCollectionDto, SaveWordDto, UpdateCollectionDto } from './model';

import { apiInstance } from '../instance';

export const collectionsControllerFind = (signal?: AbortSignal) => {
	return apiInstance<void>({ url: `/collections`, method: 'GET', signal });
};

export const getCollectionsControllerFindQueryKey = () => {
	return [`/collections`] as const;
};

export const getCollectionsControllerFindQueryOptions = <
	TData = Awaited<ReturnType<typeof collectionsControllerFind>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFind>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCollectionsControllerFindQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof collectionsControllerFind>>> = ({
		signal,
	}) => collectionsControllerFind(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof collectionsControllerFind>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CollectionsControllerFindQueryResult = NonNullable<
	Awaited<ReturnType<typeof collectionsControllerFind>>
>;
export type CollectionsControllerFindQueryError = unknown;

export function useCollectionsControllerFind<
	TData = Awaited<ReturnType<typeof collectionsControllerFind>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFind>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof collectionsControllerFind>>,
					TError,
					Awaited<ReturnType<typeof collectionsControllerFind>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerFind<
	TData = Awaited<ReturnType<typeof collectionsControllerFind>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFind>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof collectionsControllerFind>>,
					TError,
					Awaited<ReturnType<typeof collectionsControllerFind>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerFind<
	TData = Awaited<ReturnType<typeof collectionsControllerFind>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFind>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useCollectionsControllerFind<
	TData = Awaited<ReturnType<typeof collectionsControllerFind>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFind>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getCollectionsControllerFindQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getCollectionsControllerFindSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof collectionsControllerFind>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFind>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCollectionsControllerFindQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof collectionsControllerFind>>> = ({
		signal,
	}) => collectionsControllerFind(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof collectionsControllerFind>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CollectionsControllerFindSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof collectionsControllerFind>>
>;
export type CollectionsControllerFindSuspenseQueryError = unknown;

export function useCollectionsControllerFindSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerFind>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFind>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerFindSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerFind>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFind>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerFindSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerFind>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFind>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useCollectionsControllerFindSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerFind>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFind>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getCollectionsControllerFindSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const collectionsControllerCreate = (
	createCollectionDto: CreateCollectionDto,
	signal?: AbortSignal,
) => {
	return apiInstance<void>({
		url: `/collections`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: createCollectionDto,
		signal,
	});
};

export const getCollectionsControllerCreateMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof collectionsControllerCreate>>,
		TError,
		{ data: CreateCollectionDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof collectionsControllerCreate>>,
	TError,
	{ data: CreateCollectionDto },
	TContext
> => {
	const mutationKey = ['collectionsControllerCreate'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof collectionsControllerCreate>>,
		{ data: CreateCollectionDto }
	> = (props) => {
		const { data } = props ?? {};

		return collectionsControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CollectionsControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof collectionsControllerCreate>>
>;
export type CollectionsControllerCreateMutationBody = CreateCollectionDto;
export type CollectionsControllerCreateMutationError = unknown;

export const useCollectionsControllerCreate = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof collectionsControllerCreate>>,
			TError,
			{ data: CreateCollectionDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof collectionsControllerCreate>>,
	TError,
	{ data: CreateCollectionDto },
	TContext
> => {
	const mutationOptions = getCollectionsControllerCreateMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const collectionsControllerGetSavedCollections = (signal?: AbortSignal) => {
	return apiInstance<void>({ url: `/collections/saved`, method: 'GET', signal });
};

export const getCollectionsControllerGetSavedCollectionsQueryKey = () => {
	return [`/collections/saved`] as const;
};

export const getCollectionsControllerGetSavedCollectionsQueryOptions = <
	TData = Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
			TError,
			TData
		>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCollectionsControllerGetSavedCollectionsQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>
	> = ({ signal }) => collectionsControllerGetSavedCollections(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CollectionsControllerGetSavedCollectionsQueryResult = NonNullable<
	Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>
>;
export type CollectionsControllerGetSavedCollectionsQueryError = unknown;

export function useCollectionsControllerGetSavedCollections<
	TData = Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
					TError,
					Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerGetSavedCollections<
	TData = Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
					TError,
					Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerGetSavedCollections<
	TData = Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useCollectionsControllerGetSavedCollections<
	TData = Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getCollectionsControllerGetSavedCollectionsQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getCollectionsControllerGetSavedCollectionsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<
			Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
			TError,
			TData
		>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCollectionsControllerGetSavedCollectionsQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>
	> = ({ signal }) => collectionsControllerGetSavedCollections(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CollectionsControllerGetSavedCollectionsSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>
>;
export type CollectionsControllerGetSavedCollectionsSuspenseQueryError = unknown;

export function useCollectionsControllerGetSavedCollectionsSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerGetSavedCollectionsSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerGetSavedCollectionsSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useCollectionsControllerGetSavedCollectionsSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetSavedCollections>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getCollectionsControllerGetSavedCollectionsSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const collectionsControllerFindAll = (signal?: AbortSignal) => {
	return apiInstance<void>({ url: `/collections/find`, method: 'GET', signal });
};

export const getCollectionsControllerFindAllQueryKey = () => {
	return [`/collections/find`] as const;
};

export const getCollectionsControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof collectionsControllerFindAll>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCollectionsControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof collectionsControllerFindAll>>> = ({
		signal,
	}) => collectionsControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof collectionsControllerFindAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CollectionsControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof collectionsControllerFindAll>>
>;
export type CollectionsControllerFindAllQueryError = unknown;

export function useCollectionsControllerFindAll<
	TData = Awaited<ReturnType<typeof collectionsControllerFindAll>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFindAll>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof collectionsControllerFindAll>>,
					TError,
					Awaited<ReturnType<typeof collectionsControllerFindAll>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerFindAll<
	TData = Awaited<ReturnType<typeof collectionsControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFindAll>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof collectionsControllerFindAll>>,
					TError,
					Awaited<ReturnType<typeof collectionsControllerFindAll>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerFindAll<
	TData = Awaited<ReturnType<typeof collectionsControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFindAll>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useCollectionsControllerFindAll<
	TData = Awaited<ReturnType<typeof collectionsControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFindAll>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getCollectionsControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getCollectionsControllerFindAllSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof collectionsControllerFindAll>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<Awaited<ReturnType<typeof collectionsControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCollectionsControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof collectionsControllerFindAll>>> = ({
		signal,
	}) => collectionsControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof collectionsControllerFindAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CollectionsControllerFindAllSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof collectionsControllerFindAll>>
>;
export type CollectionsControllerFindAllSuspenseQueryError = unknown;

export function useCollectionsControllerFindAllSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerFindAll>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerFindAll>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerFindAllSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerFindAll>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerFindAllSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerFindAll>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useCollectionsControllerFindAllSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerFindAll>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerFindAll>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getCollectionsControllerFindAllSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const collectionsControllerUpdate = (
	id: string,
	updateCollectionDto: UpdateCollectionDto,
) => {
	return apiInstance<void>({
		url: `/collections/${id}`,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json' },
		data: updateCollectionDto,
	});
};

export const getCollectionsControllerUpdateMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof collectionsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateCollectionDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof collectionsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateCollectionDto },
	TContext
> => {
	const mutationKey = ['collectionsControllerUpdate'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof collectionsControllerUpdate>>,
		{ id: string; data: UpdateCollectionDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return collectionsControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CollectionsControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof collectionsControllerUpdate>>
>;
export type CollectionsControllerUpdateMutationBody = UpdateCollectionDto;
export type CollectionsControllerUpdateMutationError = unknown;

export const useCollectionsControllerUpdate = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof collectionsControllerUpdate>>,
			TError,
			{ id: string; data: UpdateCollectionDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof collectionsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateCollectionDto },
	TContext
> => {
	const mutationOptions = getCollectionsControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const collectionsControllerRemove = (id: string) => {
	return apiInstance<void>({ url: `/collections/${id}`, method: 'DELETE' });
};

export const getCollectionsControllerRemoveMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof collectionsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof collectionsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ['collectionsControllerRemove'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof collectionsControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return collectionsControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type CollectionsControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof collectionsControllerRemove>>
>;

export type CollectionsControllerRemoveMutationError = unknown;

export const useCollectionsControllerRemove = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof collectionsControllerRemove>>,
			TError,
			{ id: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof collectionsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getCollectionsControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const collectionsControllerSaveWord = (id: string, saveWordDto: SaveWordDto) => {
	return apiInstance<void>({
		url: `/collections/saveWord/${id}`,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json' },
		data: saveWordDto,
	});
};

export const getCollectionsControllerSaveWordMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof collectionsControllerSaveWord>>,
		TError,
		{ id: string; data: SaveWordDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof collectionsControllerSaveWord>>,
	TError,
	{ id: string; data: SaveWordDto },
	TContext
> => {
	const mutationKey = ['collectionsControllerSaveWord'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof collectionsControllerSaveWord>>,
		{ id: string; data: SaveWordDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return collectionsControllerSaveWord(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CollectionsControllerSaveWordMutationResult = NonNullable<
	Awaited<ReturnType<typeof collectionsControllerSaveWord>>
>;
export type CollectionsControllerSaveWordMutationBody = SaveWordDto;
export type CollectionsControllerSaveWordMutationError = unknown;

export const useCollectionsControllerSaveWord = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof collectionsControllerSaveWord>>,
			TError,
			{ id: string; data: SaveWordDto },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof collectionsControllerSaveWord>>,
	TError,
	{ id: string; data: SaveWordDto },
	TContext
> => {
	const mutationOptions = getCollectionsControllerSaveWordMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const collectionsControllerGetWordsByCollectionsId = (id: string, signal?: AbortSignal) => {
	return apiInstance<void>({ url: `/collections/words/${id}`, method: 'GET', signal });
};

export const getCollectionsControllerGetWordsByCollectionsIdQueryKey = (id: string) => {
	return [`/collections/words/${id}`] as const;
};

export const getCollectionsControllerGetWordsByCollectionsIdQueryOptions = <
	TData = Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getCollectionsControllerGetWordsByCollectionsIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>
	> = ({ signal }) => collectionsControllerGetWordsByCollectionsId(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CollectionsControllerGetWordsByCollectionsIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>
>;
export type CollectionsControllerGetWordsByCollectionsIdQueryError = unknown;

export function useCollectionsControllerGetWordsByCollectionsId<
	TData = Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
	TError = unknown,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
					TError,
					Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerGetWordsByCollectionsId<
	TData = Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
					TError,
					Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerGetWordsByCollectionsId<
	TData = Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useCollectionsControllerGetWordsByCollectionsId<
	TData = Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getCollectionsControllerGetWordsByCollectionsIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getCollectionsControllerGetWordsByCollectionsIdSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getCollectionsControllerGetWordsByCollectionsIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>
	> = ({ signal }) => collectionsControllerGetWordsByCollectionsId(id, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CollectionsControllerGetWordsByCollectionsIdSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>
>;
export type CollectionsControllerGetWordsByCollectionsIdSuspenseQueryError = unknown;

export function useCollectionsControllerGetWordsByCollectionsIdSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
	TError = unknown,
>(
	id: string,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerGetWordsByCollectionsIdSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useCollectionsControllerGetWordsByCollectionsIdSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useCollectionsControllerGetWordsByCollectionsIdSuspense<
	TData = Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof collectionsControllerGetWordsByCollectionsId>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getCollectionsControllerGetWordsByCollectionsIdSuspenseQueryOptions(
		id,
		options,
	);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
