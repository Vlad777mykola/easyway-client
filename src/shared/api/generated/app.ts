/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from '@tanstack/react-query';

import type { HelloWordDto } from './model';

import { apiInstance } from '../instance';

export const appControllerGetHello = (signal?: AbortSignal) => {
	return apiInstance<HelloWordDto>({ url: `/`, method: 'GET', signal });
};

export const getAppControllerGetHelloQueryKey = () => {
	return [`/`] as const;
};

export const getAppControllerGetHelloQueryOptions = <
	TData = Awaited<ReturnType<typeof appControllerGetHello>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) =>
		appControllerGetHello(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof appControllerGetHello>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AppControllerGetHelloQueryResult = NonNullable<
	Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = unknown;

export function useAppControllerGetHello<
	TData = Awaited<ReturnType<typeof appControllerGetHello>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof appControllerGetHello>>,
					TError,
					Awaited<ReturnType<typeof appControllerGetHello>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAppControllerGetHello<
	TData = Awaited<ReturnType<typeof appControllerGetHello>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof appControllerGetHello>>,
					TError,
					Awaited<ReturnType<typeof appControllerGetHello>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAppControllerGetHello<
	TData = Awaited<ReturnType<typeof appControllerGetHello>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAppControllerGetHello<
	TData = Awaited<ReturnType<typeof appControllerGetHello>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getAppControllerGetHelloQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getAppControllerGetHelloSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof appControllerGetHello>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) =>
		appControllerGetHello(signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof appControllerGetHello>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AppControllerGetHelloSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloSuspenseQueryError = unknown;

export function useAppControllerGetHelloSuspense<
	TData = Awaited<ReturnType<typeof appControllerGetHello>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAppControllerGetHelloSuspense<
	TData = Awaited<ReturnType<typeof appControllerGetHello>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAppControllerGetHelloSuspense<
	TData = Awaited<ReturnType<typeof appControllerGetHello>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAppControllerGetHelloSuspense<
	TData = Awaited<ReturnType<typeof appControllerGetHello>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getAppControllerGetHelloSuspenseQueryOptions(options);

	const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
