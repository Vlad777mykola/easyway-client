const commonVariants = ['generics', 'typeScript', 'type', 'interface', 'union', 'assertions'];

// const typeCompareInterface = [
// 	'use syntax type',
// 	'uses intersection (&) to combine types',
// 	'can define union types',
// 	'does not support declaration merging',
// 	'can define aliases for primitive types',
// 	'can define tuples and function types',
// ];
// const interfaceCompareType = [
// 	'use syntax interface',
// 	'uses extends to inherit from other interfaces',
// 	'cannot directly define union types',
// 	'cannot be used to define primitive types',
// 	'cannot define tuples',
// 	'supports declaration merging',
// ];
export const tsQ = [
	{
		exercise:
			'Enable you to write code that works with a variety of types while maintaining type safety',
		exerciseAnswer: 'generics',
		explanation:
			'Enable you to write code that works with a variety of types while maintaining type safety. Instead of specifying a specific type, you can use a placeholder type that gets replaced with the actual type when the code is used',
		used: 'Instead of specifying a specific type, you can use a placeholder type that gets replaced with the actual type when the code is used',
		variants: [...commonVariants],
		id: 'f7c45b47-0d77-4a2d-a96sdfwef8-f0fc2a268f96',
	},
	{
		exercise: 'Is a statically typed superset of JavaScript. It adds types',
		exerciseAnswer: 'typeScript',
		explanation:
			'TypeScript is a statically typed superset of JavaScript. It adds types, interfaces, and compile-time type checking, which JavaScript lacks. TypeScript transpiles to plain JavaScript, making it compatible with any JavaScript environment',
		used: 'It adds types, interfaces, and compile-time type checking, which JavaScript lacks',
		variants: [...commonVariants],
		id: 'f7c45b47-0d77-4a2d-a968-ffadfds0fc2a268f96',
	},
	{
		exercise: 'What is the declaration merging?',
		exerciseAnswer: 'same interface multiple times',
		explanation: 'If you declare the same interface multiple times, TypeScript will merge them',
		variants: [
			'same interface multiple times',
			'syntax, combining, and use cases',
			...commonVariants,
		],
		id: 'f7c45b47-0d77-4a2d-a968-fgwee0fc2a268f96',
	},

	/// type and interface
	{
		exercise: 'What is the difference between type and interface?',
		exerciseAnswer: 'syntax, capabilities, and use cases',
		explanation:
			'TypeScript is a statically typed superset of JavaScript. It adds types, interfaces, and compile-time type checking, which JavaScript lacks. TypeScript transpiles to plain JavaScript, making it compatible with any JavaScript environment',
		used: 'It adds types, interfaces, and compile-time type checking, which JavaScript lacks',
		variants: [
			'syntax, capabilities, and use cases',
			'syntax, combining, and use cases',
			'syntax, capabilities, and use interface',
		],
		id: 'f7c45b47-0d77-4a2d-a968-fadf0fc2asdf268f96',
	},
	{
		exercise: 'What is the difference between type compare with interface?',
		exerciseAnswer: 'typeScript',
		explanation:
			'In TypeScript, both type and interface are used to define the shape of objects or custom types, but they have some differences in terms of syntax, capabilities, and use cases',
		used: "Here's a breakdown of the key differences",
		variants: [
			'Uses intersection (&) to combine types, capabilities, and use cases',
			'syntax, combining, and use cases',
		],
		id: 'f7c45b47-0d77asdfggfj-4a2d-a968-asdff0fc2a268f96',
	},
	{
		exercise: 'What is the difference between interface compare with type?',
		exerciseAnswer: 'typeScript',
		explanation:
			'In TypeScript, both type and interface are used to define the shape of objects or custom types, but they have some differences in terms of syntax, capabilities, and use cases',
		used: "Here's a breakdown of the key differences",
		variants: [
			'uses extends to inherit from other interfaces, Can define union types, and use interface',
			'syntax, combining, and use cases',
		],
		id: 'f7c45b47-0d7wh47-4a2d-a968-f0fchw452a268f96',
	},
	{
		exercise: 'What is the difference between interface compare with type?',
		exerciseAnswer: 'typeScript',
		explanation:
			'In TypeScript, both type and interface are used to define the shape of objects or custom types, but they have some differences in terms of syntax, capabilities, and use cases',
		used: "Here's a breakdown of the key differences",
		variants: [
			'uses extends to inherit from other interfaces, Can define union types, and use interface',
			'syntax, combining, and use cases',
		],
		id: 'f7c45b47-0d7whw457-4a2d-a968wh4545-f0fc2a268f96',
	},

	// type functions

	{
		exercise: 'Refers to a React element returned by a component',
		exerciseAnswer: 'JSX.Element',
		explanation: "What's the difference between JSX.Element and React.ReactNode?",
		variants: ['JSX.Element', 'React.ReactNode', ...commonVariants],
		id: 'f7c45b47-0d77-4a2w4534d-a968-f0fc2hwerhwjna268f96',
	},
	{
		exercise: 'Includes anything renderable by React, like strings, numbers, or fragments',
		exerciseAnswer: 'React.ReactNode',
		explanation: "What's the difference between JSX.Element and React.ReactNode?",
		variants: ['JSX.Element', 'React.ReactNode', ...commonVariants],
		id: 'f7c45b47-0d77-ewrv454a2d-a968-fwerteg0fc2a268f96',
	},

	{
		exercise: 'Can define both abstract methods and concrete methods',
		exerciseAnswer: 'abstract class',
		explanation:
			'Define base classes with incomplete functionality, forcing subclasses to implement specific methods',
		variants: ['interface', 'abstract class', ...commonVariants],
		id: 'f7c45b47-0d77-4ag3gdf2d-a968-f0fsdbdf34c2a268f96',
	},
	{
		exercise: 'Defines a contract (structure) without any implementation',
		exerciseAnswer: 'interface',
		explanation: 'What is the difference between an Interface and an Abstract Class',
		variants: ['interface', 'abstract class', ...commonVariants],
		id: 'f7c4534b47-0rt3d77-4ea2d-a968-f0fdfbdfc2a268f96',
	},
	{
		exercise:
			'Types that allow you to create new string types by combining unions of string literals',
		exerciseAnswer: 'literal types',
		explanation: 'What are template literal types, and how useful are they',
		variants: ['interface', 'abstract class', ...commonVariants],
		id: 'f7c45b4df7-0d77-4a2d-a9dfg8-f0fc2adg34268f96',
	},

	// utility types
	{
		exercise: 'Changes all the properties in an object to be optional',
		exerciseAnswer: 'Partial',
		explanation: 'Makes all properties of a type optional.',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Readonly',
			'Parameters',
		],
		id: 'f7c45b47-0d77-4a2d-a968-f0f34gc2a268f96',
	},
	{
		exercise: 'Changes all the properties in an object to be required',
		exerciseAnswer: 'Required',
		explanation: 'Makes all properties of a type required.',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Readonly',
			'Parameters',
		],
		id: 'a1b2c3d4-5678-903ef-ghij-kdfglmnopqrstuv',
	},
	{
		exercise:
			'Constructs an object type whose property keys are from a union and values are of a specific type',
		exerciseAnswer: 'Record',
		explanation: 'Creates an object type with specified keys and values.',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Readonly',
			'Parameters',
		],
		id: 'b2c3d4e5-6789-034t3g1fg-hijk-lmnopqrstuvwx',
	},
	{
		exercise: 'Constructs a type by excluding specific properties from another type',
		exerciseAnswer: 'Omit',
		explanation: 'Creates a type by excluding specified properties from another type.',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Readonly',
			'Parameters',
		],
		id: 'c3d4e5f6-7890-12gh-igdfbyhjkl-mnopqrstuvwxy',
	},
	{
		exercise: 'Constructs a type by picking specific properties from another type',
		exerciseAnswer: 'Pick',
		explanation: 'Creates a type by selecting specific properties from another type.',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Readonly',
			'Parameters',
		],
		id: 'd4e5f6g7-8901-23hi-jklerterm-nopbfqrstuvwxyz',
	},
	{
		exercise: 'Constructs a type by excluding specific types from a union',
		exerciseAnswer: 'Exclude',
		explanation: 'Creates a type by excluding specific types from a union.',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Readonly',
			'Parameters',
		],
		id: 'e5f6g7h8-9012-34ij-klmn-opqrs343gtuvwxyza',
	},
	{
		exercise: 'Makes all properties of a type read-only',
		exerciseAnswer: 'Readonly',
		explanation: 'Makes all properties of a type immutable.',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Readonly',
			'Parameters',
		],
		id: 'f6g7h8i9-012fdg3-45jk-lmno-pqsdfdfgrstuvwxyzab',
	},
	{
		exercise: 'Extracts the parameter types of a function type',
		exerciseAnswer: 'Parameters',
		explanation: 'Extracts the parameter types of a function as a tuple.',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Readonly',
			'Parameters',
		],
		id: 'g7h8i9j0-1234sdf-56kl-mnop-qrstuvwxyzabcd',
	},

	/// Additional TypeScript Utility Types Examples

	{
		exercise: 'Changes all the properties in an object to be optional',
		exerciseAnswer: 'Partial',
		explanation: 'Changes all the properties in an object to be optional',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Required',
			'Readonly',
			'Parameters',
		],
		id: 'f7c45b47-0d77-4a2d-a968-f0fc2a268f96',
	},
	{
		exercise: 'Changes all the properties in an object to be required',
		exerciseAnswer: 'Required',
		explanation: 'Changes all the properties in an object to be required, removing optionality',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Extract',
			'Readonly',
			'Parameters',
		],
		id: '9a23d8f1-6b54-4e9c-a238-1d6c4b57e0a1',
	},
	{
		exercise: 'Makes all properties in an object readonly',
		exerciseAnswer: 'Readonly',
		explanation: 'Makes all properties in an object readonly, preventing reassignment',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Extract',
			'Readonly',
			'ReadonlyArray',
		],
		id: '7d45f2a3-d8e6-4c9b-bf27-3e89a74c50b2',
	},
	{
		exercise: 'Constructs an object type with a set of properties of a specified type',
		exerciseAnswer: 'Record',
		explanation: 'Constructs an object type with keys of type K and values of type T',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Extract',
			'Readonly',
			'Parameters',
		],
		id: '1c6e9f82-3a7b-48d5-b12c-f0e35a6d8e9a',
	},
	{
		exercise: 'Constructs a type by picking specified properties from a type',
		exerciseAnswer: 'Pick',
		explanation: 'Constructs a type by picking a set of properties K from type T',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Extract',
			'Readonly',
			'Parameters',
		],
		id: 'b23a7c9d-f4e5-4b6a-8c9d-0e12f34a5b6c',
	},
	{
		exercise: 'Constructs a type by omitting specified properties from a type',
		exerciseAnswer: 'Omit',
		explanation: 'Constructs a type by omitting a set of properties K from type T',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Extract',
			'Readonly',
			'Parameters',
		],
		id: '4f5e6d7c-8b9a-0c1d-2e3f-a4b5c6d7e8f9',
	},
	{
		exercise: 'Extracts union members that are assignable to a specific type',
		exerciseAnswer: 'Extract',
		explanation: 'Extracts from T all union members that are assignable to U',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Extract',
			'Readonly',
			'NonNullable',
		],
		id: '9a8b7c6d-5e4f-3d2c-1b0a-9f8e7d6c5b4a',
	},
	{
		exercise: 'Excludes union members that are assignable to a specific type',
		exerciseAnswer: 'Exclude',
		explanation: 'Excludes from T all union members that are assignable to U',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Extract',
			'Readonly',
			'NonNullable',
		],
		id: '3e4f5d6c-7b8a-9c0d-1e2f-3a4b5c6d7e8f',
	},
	{
		exercise: 'Removes null and undefined from a type',
		exerciseAnswer: 'NonNullable',
		explanation: 'Constructs a type by excluding null and undefined from T',
		variants: [
			'Partial',
			'Required',
			'Record',
			'Omit',
			'Pick',
			'Exclude',
			'Extract',
			'NonNullable',
			'ReturnType',
		],
		id: '7c8d9e0f-1a2b-3c4d-5e6f-7a8b9c0d1e2f',
	},
	{
		exercise: 'Obtains the parameters of a function type as a tuple',
		exerciseAnswer: 'Parameters',
		explanation: 'Extracts the parameter types of a function type as a tuple',
		variants: [
			'Parameters',
			'ReturnType',
			'ConstructorParameters',
			'InstanceType',
			'ThisParameterType',
			'OmitThisParameter',
			'Awaited',
		],
		id: '2a3b4c5d-6e7f-8g9h-0i1j-2k3l4m5n6o7p',
	},
	{
		exercise: 'Obtains the return type of a function type',
		exerciseAnswer: 'ReturnType',
		explanation: 'Extracts the return type of a function type',
		variants: [
			'Parameters',
			'ReturnType',
			'ConstructorParameters',
			'InstanceType',
			'ThisParameterType',
			'OmitThisParameter',
			'Awaited',
		],
		id: '8p9o0i1u-2y3t-4r5e-6w7q-8a9s0d1f2g3h',
	},
	{
		exercise: 'Obtains the constructor parameters of a class type as a tuple',
		exerciseAnswer: 'ConstructorParameters',
		explanation: 'Extracts the parameter types of a constructor function type as a tuple',
		variants: [
			'Parameters',
			'ReturnType',
			'ConstructorParameters',
			'InstanceType',
			'ThisParameterType',
			'OmitThisParameter',
			'Awaited',
		],
		id: '4j5k6l7m-8n9o-0p1q-2r3s-4t5u6v7w8x9y',
	},
	{
		exercise: 'Obtains the instance type of a constructor function type',
		exerciseAnswer: 'InstanceType',
		explanation: 'Extracts the instance type of a constructor function type',
		variants: [
			'Parameters',
			'ReturnType',
			'ConstructorParameters',
			'InstanceType',
			'ThisParameterType',
			'OmitThisParameter',
			'Awaited',
		],
		id: '0z1x2c3v-4b5n-6m7a-8s9d-0f1g2h3j4k5l',
	},
	{
		exercise: 'Extracts the type of the "this" parameter from a function type',
		exerciseAnswer: 'ThisParameterType',
		explanation: 'Extracts the type of the "this" parameter of a function type',
		variants: [
			'Parameters',
			'ReturnType',
			'ConstructorParameters',
			'InstanceType',
			'ThisParameterType',
			'OmitThisParameter',
			'Awaited',
		],
		id: '6m7n8b9v-0c1x-2z3a-4s5d-6f7g8h9j0k1l',
	},
	{
		exercise: 'Removes the "this" parameter from a function type',
		exerciseAnswer: 'OmitThisParameter',
		explanation: 'Removes the "this" parameter from a function type',
		variants: [
			'Parameters',
			'ReturnType',
			'ConstructorParameters',
			'InstanceType',
			'ThisParameterType',
			'OmitThisParameter',
			'Awaited',
		],
		id: '2m3n4b5v-6c7x-8z9a-0s1d-2f3g4h5j6k7l',
	},
	{
		exercise: 'Unwraps the type inside a Promise-like object',
		exerciseAnswer: 'Awaited',
		explanation:
			'Unwraps the type inside a Promise-like object, recursively for promises of promises',
		variants: [
			'Parameters',
			'ReturnType',
			'ConstructorParameters',
			'InstanceType',
			'ThisParameterType',
			'OmitThisParameter',
			'Awaited',
		],
		id: '8m9n0b1v-2c3x-4z5a-6s7d-8f9g0h1j2k3l',
	},

	{
		exercise: 'Transforms a union type into a tuple or object with discriminant property mapping',
		exerciseAnswer: 'UnionToIntersection',
		explanation: 'Converts a union type to an intersection type',
		variants: [
			'UnionToIntersection',
			'UnionToTuple',
			'DeepPartial',
			'DeepReadonly',
			'Mutable',
			'ValueOf',
			'KeysOfType',
			'OptionalKeys',
			'RequiredKeys',
		],
		id: '4m5n6b7v-8c9x-0z1a-2s3d-4f5g6h7j8k9l',
	},
	{
		exercise: 'Makes all properties in nested objects readonly',
		exerciseAnswer: 'DeepReadonly',
		explanation: 'Makes all properties in an object and its nested objects readonly recursively',
		variants: [
			'DeepPartial',
			'DeepReadonly',
			'DeepRequired',
			'DeepMutable',
			'Mutable',
			'Flatten',
			'UnpackPromise',
			'ValueOf',
			'KeysOfType',
		],
		id: '0m1n2b3v-4c5x-6z7a-8s9d-0f1g2h3j4k5l',
	},
	{
		exercise: 'Makes all properties in an object mutable (removes readonly)',
		exerciseAnswer: 'Mutable',
		explanation: 'Removes the readonly modifier from all properties in a type',
		variants: [
			'DeepMutable',
			'Mutable',
			'DeepPartial',
			'DeepReadonly',
			'DeepRequired',
			'Flatten',
			'UnpackPromise',
			'ValueOf',
			'KeysOfType',
		],
		id: '6m7n8b9v-0c1x-2z3a-4s5d-6f7g8h9j0k1l',
	},
	{
		exercise: 'Gets all keys of an object that match a specific type',
		exerciseAnswer: 'KeysOfType',
		explanation: 'Extracts all keys from an object whose values match a specific type',
		variants: [
			'KeysOfType',
			'ValueOf',
			'OptionalKeys',
			'RequiredKeys',
			'ReadonlyKeys',
			'MutableKeys',
			'DeepPartial',
			'DeepReadonly',
			'DeepRequired',
		],
		id: '2m3n4b5v-6c7x-8z9a-0s1d-2f3g4h5j6k7l',
	},
	{
		exercise: 'Gets all values from an object type as a union',
		exerciseAnswer: 'ValueOf',
		explanation: 'Extracts the union type of all the values in an object type',
		variants: [
			'ValueOf',
			'KeysOfType',
			'OptionalKeys',
			'RequiredKeys',
			'ReadonlyKeys',
			'MutableKeys',
			'DeepPartial',
			'DeepReadonly',
			'DeepRequired',
		],
		id: '8m9n0b1v-2c3x-4z5a-6s7d-8f9g0h1j2k3l',
	},
	{
		exercise: 'Gets all keys of an object that are marked as optional',
		exerciseAnswer: 'OptionalKeys',
		explanation: 'Extracts all optional keys from an object type',
		variants: [
			'OptionalKeys',
			'RequiredKeys',
			'ReadonlyKeys',
			'MutableKeys',
			'KeysOfType',
			'ValueOf',
			'DeepPartial',
			'DeepReadonly',
			'DeepRequired',
		],
		id: '4m5n6b7v-8c9x-0z1a-2s3d-4f5g6h7j8k9l',
	},
	{
		exercise: 'Gets all keys of an object that are marked as required',
		exerciseAnswer: 'RequiredKeys',
		explanation: 'Extracts all required (non-optional) keys from an object type',
		variants: [
			'OptionalKeys',
			'RequiredKeys',
			'ReadonlyKeys',
			'MutableKeys',
			'KeysOfType',
			'ValueOf',
			'DeepPartial',
			'DeepReadonly',
			'DeepRequired',
		],
		id: '0m1n2b3v-4c5x-6z7a-8s9d-0f1g2h3j4k5l',
	},
	{
		exercise: 'Gets all keys of an object that are marked as readonly',
		exerciseAnswer: 'ReadonlyKeys',
		explanation: 'Extracts all readonly keys from an object type',
		variants: [
			'OptionalKeys',
			'RequiredKeys',
			'ReadonlyKeys',
			'MutableKeys',
			'KeysOfType',
			'ValueOf',
			'DeepPartial',
			'DeepReadonly',
			'DeepRequired',
		],
		id: '6m7n8b9v-0c1x-2z3a-4s5d-6f7g8h9j0k1l',
	},
	{
		exercise: 'Makes all properties in nested objects optional',
		exerciseAnswer: 'DeepPartial',
		explanation: 'Makes all properties in an object and its nested objects optional recursively',
		variants: [
			'DeepPartial',
			'DeepReadonly',
			'DeepRequired',
			'DeepMutable',
			'Mutable',
			'Flatten',
			'UnpackPromise',
			'ValueOf',
			'KeysOfType',
		],
		id: '2m3n4b5v-6c7x-8z9a-0s1d-2f3g4h5j6k7l',
	},
	{
		exercise: 'Flattens a nested object type into a single-level object',
		exerciseAnswer: 'Flatten',
		explanation: 'Converts a nested object type into a flat object with path-based property names',
		variants: [
			'Flatten',
			'DeepPartial',
			'DeepReadonly',
			'DeepRequired',
			'DeepMutable',
			'Mutable',
			'UnpackPromise',
			'ValueOf',
			'KeysOfType',
		],
		id: '8m9n0b1v-2c3x-4z5a-6s7d-8f9g0h1j2k3l',
	},
	{
		exercise:
			'Creates a type with the same properties as another, but with specific properties made nullable',
		exerciseAnswer: 'Nullable',
		explanation: 'Makes specified properties nullable (T | null)',
		variants: [
			'Nullable',
			'DeepPartial',
			'DeepReadonly',
			'DeepRequired',
			'DeepMutable',
			'Mutable',
			'NonNullable',
			'ValueOf',
			'KeysOfType',
		],
		id: '4m5n6b7v-8c9x-0z1a-2s3d-4f5g6h7j8k9l',
	},
	{
		exercise: 'Creates a mapped type that makes all properties match a pattern',
		exerciseAnswer: 'Template',
		explanation: 'Creates a new type by applying a template to each property of an object',
		variants: [
			'Template',
			'Flatten',
			'DeepPartial',
			'DeepReadonly',
			'DeepRequired',
			'DeepMutable',
			'Mutable',
			'ValueOf',
			'KeysOfType',
		],
		id: '0m1n2b3v-4c5x-6z7a-8s9d-0f1g2h3j4k5l',
	},
	{
		exercise: 'Converts object types with string literal keys to have number keys',
		exerciseAnswer: 'StringKeyToNumber',
		explanation: 'Transforms string literal keys in an object type to number keys',
		variants: [
			'StringKeyToNumber',
			'NumberKeyToString',
			'Template',
			'Flatten',
			'DeepPartial',
			'DeepReadonly',
			'ValueOf',
			'KeysOfType',
			'RequiredKeys',
		],
		id: '6m7n8b9v-0c1x-2z3a-4s5d-6f7g8h9j0k1l',
	},
	{
		exercise: 'Creates an intersection of multiple object types with common properties merged',
		exerciseAnswer: 'Merge',
		explanation:
			'Merges multiple object types, with later types overriding earlier ones for common properties',
		variants: [
			'Merge',
			'Omit',
			'Pick',
			'UnionToIntersection',
			'DeepPartial',
			'DeepReadonly',
			'ValueOf',
			'KeysOfType',
			'RequiredKeys',
		],
		id: '2m3n4b5v-6c7x-8z9a-0s1d-2f3g4h5j6k7l',
	},
	{
		exercise: 'Creates a type with all enumerable properties of another type',
		exerciseAnswer: 'EnumerableKeys',
		explanation: 'Gets all enumerable property keys from a type (excluding methods)',
		variants: [
			'EnumerableKeys',
			'OptionalKeys',
			'RequiredKeys',
			'ReadonlyKeys',
			'MutableKeys',
			'KeysOfType',
			'ValueOf',
			'DeepPartial',
			'DeepReadonly',
		],
		id: '8m9n0b1v-2c3x-4z5a-6s7d-8f9g0h1j2k3l',
	},

	// TypeScript Type Guards
	{
		exercise: 'Runtime check that narrows a type within a conditional block',
		exerciseAnswer: 'Type Guard Function',
		explanation:
			'A function that returns a type predicate (param is Type) to perform runtime type checking',
		variants: [
			'Type Guard Function',
			'instanceof',
			'typeof',
			'in',
			'Type Assertion',
			'Type Predicate',
			'User-Defined Type Guard',
			'Discriminated Union',
		],
		id: '9a8b7c6d-5e4f-3d2c-1b0a-9f8e7d6c5b4a3',
	},
	{
		exercise: 'Checks if a value is an instance of a class or constructor function',
		exerciseAnswer: 'instanceof',
		explanation:
			'Operator that checks if an object is an instance of a specific class or constructor function',
		variants: [
			'instanceof',
			'typeof',
			'in',
			'Type Guard Function',
			'Type Assertion',
			'Type Predicate',
			'User-Defined Type Guard',
			'Discriminated Union',
		],
		id: '3e4f5d6c-7b8a-9c0d-1e2f-3a4b5c6d7e8f3',
	},
	{
		exercise: 'Checks the primitive type of a value at runtime',
		exerciseAnswer: 'typeof',
		explanation:
			'Operator that returns a string indicating the primitive type of a value at runtime',
		variants: [
			'typeof',
			'instanceof',
			'in',
			'Type Guard Function',
			'Type Assertion',
			'Type Predicate',
			'User-Defined Type Guard',
			'Discriminated Union',
		],
		id: '7c8d9e0f-1a2b-3c4d-5e6f-7a8b9c0d1e2f3',
	},
	{
		exercise: 'Checks if a property exists on an object',
		exerciseAnswer: 'in',
		explanation:
			'Operator that checks if a specified property exists in an object or its prototype chain',
		variants: [
			'in',
			'typeof',
			'instanceof',
			'Type Guard Function',
			'Type Assertion',
			'Type Predicate',
			'User-Defined Type Guard',
			'Discriminated Union',
		],
		id: '2a3b4c5d-6e7f-8g9h-0i1j-2k3l4m5n6o7p3',
	},
	{
		exercise: 'A function return type annotation that performs type narrowing',
		exerciseAnswer: 'Type Predicate',
		explanation:
			'A return type in the form "param is Type" that allows TypeScript to narrow types in conditionals',
		variants: [
			'Type Predicate',
			'Type Guard Function',
			'instanceof',
			'typeof',
			'in',
			'Type Assertion',
			'User-Defined Type Guard',
			'Discriminated Union',
		],
		id: '8p9o0i1u-2y3t-4r5e-6w7q-8a9s0d1f2g3h3',
	},
	{
		exercise: 'A custom function that returns a boolean and uses a type predicate',
		exerciseAnswer: 'User-Defined Type Guard',
		explanation:
			'A function that performs custom type checking and uses a type predicate return type',
		variants: [
			'User-Defined Type Guard',
			'Type Predicate',
			'Type Guard Function',
			'instanceof',
			'typeof',
			'in',
			'Type Assertion',
			'Discriminated Union',
		],
		id: '4j5k6l7m-8n9o-0p1q-2r3s-4t5u6v7w8x9y3',
	},
	{
		exercise: 'Uses a common property with different literal types to narrow union types',
		exerciseAnswer: 'Discriminated Union',
		explanation:
			'A pattern where union types have a common property with different literal values for type narrowing',
		variants: [
			'Discriminated Union',
			'User-Defined Type Guard',
			'Type Predicate',
			'Type Guard Function',
			'instanceof',
			'typeof',
			'in',
			'Type Assertion',
		],
		id: '0z1x2c3v-4b5n-6m7a-8s9d-0f1g2h3j4k5l3',
	},
	{
		exercise: "A type assertion that overrides TypeScript's inferred type",
		exerciseAnswer: 'Type Assertion',
		explanation:
			'A way to tell the compiler to treat a value as a specific type using "as Type" syntax',
		variants: [
			'Type Assertion',
			'Discriminated Union',
			'User-Defined Type Guard',
			'Type Predicate',
			'Type Guard Function',
			'instanceof',
			'typeof',
			'in',
		],
		id: '6m7n8b9v-0c1x-2z3a-4s5d-6f7g8h9j0k1l3',
	},
	{
		exercise: 'Checking if a value is null or undefined',
		exerciseAnswer: 'Nullish Check',
		explanation:
			'A condition that checks if a value is null or undefined using "value == null" or "value !== null && value !== undefined"',
		variants: [
			'Nullish Check',
			'Type Assertion',
			'Discriminated Union',
			'User-Defined Type Guard',
			'Type Predicate',
			'Type Guard Function',
			'instanceof',
			'typeof',
		],
		id: '2m3n4b5v-6c7x-8z9a-0s1d-2f3g4h5j6k7l3',
	},
	{
		exercise: 'Checks if a value satisfies a custom condition with boolean return',
		exerciseAnswer: 'Boolean Condition Guard',
		explanation:
			'A simple boolean expression that narrows types based on a custom condition (e.g., array.length > 0)',
		variants: [
			'Boolean Condition Guard',
			'Nullish Check',
			'Type Assertion',
			'Discriminated Union',
			'User-Defined Type Guard',
			'Type Predicate',
			'Type Guard Function',
			'instanceof',
		],
		id: '8m9n0b1v-2c3x-4z5a-6s7d-8f9g0h1j2k3l3',
	},
];
